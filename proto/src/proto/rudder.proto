syntax = "proto3";

package rudder;

import "common.proto";
import "manifest.proto";
import "meta.proto";

message RaftState {
  bool is_leader = 1;
}

message WheelHeartbeatRequest {
  uint64 watermark = 1;
  uint64 next_version_id = 2;
  map<uint64, RaftState> raft_states = 3;
}

message WheelHeartbeatResponse {
  repeated manifest.VersionDiff version_diffs = 1;
}

message ExhausterHeartbeatRequest {}

message ExhausterHeartbeatResponse {}

// TODO: Add status report.
message HeartbeatRequest {
  uint64 node_id = 1;
  common.Endpoint endpoint = 2;
  oneof heartbeat_message {
    WheelHeartbeatRequest wheel_heartbeat = 3;
    ExhausterHeartbeatRequest exhauster_heartbeat = 4;
  }
}

message HeartbeatResponse {
  oneof heartbeat_message {
    WheelHeartbeatResponse wheel_heartbeat = 1;
    ExhausterHeartbeatResponse exhauster_heartbeat = 2;
  }
}

message InsertL0Request {
  uint64 node_id = 1;
  repeated manifest.SstableInfo sst_infos = 2;
  uint64 next_version_id = 3;
}

message InsertL0Response {
  repeated manifest.VersionDiff version_diffs = 1;
}

message TsoRequest {}

message TsoResponse {
  uint32 timestamp = 1;
}

service RudderService {
  // Called by `wheel` and `exhauster`.
  rpc Heartbeat(HeartbeatRequest) returns (HeartbeatResponse);
  // Called by `wheel` when sstable uploader finish upload new L0 sstable to S3.
  rpc InsertL0(InsertL0Request) returns (InsertL0Response);
  // TODO: Implement transaction.
  rpc Tso(TsoRequest) returns (TsoResponse);
}

// ***** Control Service *****

message AddWheelsRequest {
  // { node id -> endpoint }
  map<uint64, common.Endpoint> wheels = 1;
}

message AddWheelsResponse {}

message AddKeyRangesRequest {
  repeated meta.KeyRangeInfo key_ranges = 1;
}

message AddKeyRangesResponse {}

message RouterRequest {}

message RouterResponse {
  repeated meta.KeyRangeInfo key_ranges = 1;
  map<uint64, common.Endpoint> wheels = 2;
}

service ControlService {
  rpc AddWheels(AddWheelsRequest) returns (AddWheelsResponse);
  rpc AddKeyRanges(AddKeyRangesRequest) returns (AddKeyRangesResponse);
  rpc Router(RouterRequest) returns (RouterResponse);
}
