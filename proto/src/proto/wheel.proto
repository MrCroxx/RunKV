syntax = "proto3";

package wheel;

import "common.proto";
import "meta.proto";

// ***** inner service *****

message AddEndpointsRequest {
  map<uint64, common.Endpoint> endpoints = 1;
}

message AddEndpointsResponse {}

message AddKeyRangeRequest {
  meta.KeyRange key_range = 1;
  uint64 group = 2;
  repeated uint64 raft_nodes = 3;
  // { raft node -> node }
  map<uint64, uint64> nodes = 4;
}

message AddKeyRangeResponse {}

message InitializeRaftGroupRequest {
  uint64 leader = 1;
  repeated uint64 raft_nodes = 2;
}

message InitializeRaftGroupResponse {}

service WheelService {
  rpc AddKeyRange(AddKeyRangeRequest) returns (AddKeyRangeResponse);
  rpc AddEndpoints(AddEndpointsRequest) returns (AddEndpointsResponse);
  rpc InitializeRaftGroup(InitializeRaftGroupRequest) returns (InitializeRaftGroupResponse);
}

// ***** raft service *****

message AppendEntriesRequest {
  uint64 id = 1;
  bytes data = 2;
}

message AppendEntriesResponse {
  uint64 id = 1;
  bytes data = 2;
}

message InstallSnapshotRequest {
  uint64 id = 1;
  bytes data = 2;
}

message InstallSnapshotResponse {
  uint64 id = 1;
  bytes data = 2;
}

message VoteRequest {
  uint64 id = 1;
  bytes data = 2;
}

message VoteResponse {
  uint64 id = 1;
  bytes data = 2;
}

message RaftRequest {
  bytes data = 1;
}

message RaftResponse {}

service RaftService {
  rpc AppendEntries(AppendEntriesRequest) returns (AppendEntriesResponse);
  rpc InstallSnapshot(InstallSnapshotRequest) returns (InstallSnapshotResponse);
  rpc Vote(VoteRequest) returns (VoteResponse);
  rpc Raft(RaftRequest) returns (RaftResponse);
}
